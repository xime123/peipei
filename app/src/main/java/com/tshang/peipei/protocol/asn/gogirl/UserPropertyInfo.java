//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/UserPropertyInfo.java
//
//   Java class for ASN.1 definition UserPropertyInfo as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:16 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>UserPropertyInfo</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class UserPropertyInfo implements ASN1Type {

  /** member variable representing the sequence member uid of type java.math.BigInteger */
  public java.math.BigInteger uid;
  /** member variable representing the sequence member score of type java.math.BigInteger */
  public java.math.BigInteger score;
  /** member variable representing the sequence member charmnum of type java.math.BigInteger */
  public java.math.BigInteger charmnum;
  /** member variable representing the sequence member goldcoin of type java.math.BigInteger */
  public java.math.BigInteger goldcoin;
  /** member variable representing the sequence member silvercoin of type java.math.BigInteger */
  public java.math.BigInteger silvercoin;
  /** member variable representing the sequence member fakescore of type java.math.BigInteger */
  public java.math.BigInteger fakescore;
  /** member variable representing the sequence member totalscore of type java.math.BigInteger */
  public java.math.BigInteger totalscore;
  /** member variable representing the sequence member consumescore of type java.math.BigInteger */
  public java.math.BigInteger consumescore;
  /** member variable representing the sequence member totalgoldcoin of type java.math.BigInteger */
  public java.math.BigInteger totalgoldcoin;
  /** member variable representing the sequence member consumegoldcoin of type java.math.BigInteger */
  public java.math.BigInteger consumegoldcoin;
  /** member variable representing the sequence member totalsilvercoin of type java.math.BigInteger */
  public java.math.BigInteger totalsilvercoin;
  /** member variable representing the sequence member consumesilvercoin of type java.math.BigInteger */
  public java.math.BigInteger consumesilvercoin;
  /** member variable representing the sequence member fggoldcoin of type java.math.BigInteger */
  public java.math.BigInteger fggoldcoin;
  /** member variable representing the sequence member fakeauthscore of type java.math.BigInteger */
  public java.math.BigInteger fakeauthscore;
  /** member variable representing the sequence member fortunenum of type java.math.BigInteger */
  public java.math.BigInteger fortunenum;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member revint4 of type java.math.BigInteger */
  public java.math.BigInteger revint4;
  /** member variable representing the sequence member revint5 of type java.math.BigInteger */
  public java.math.BigInteger revint5;
  /** member variable representing the sequence member revint6 of type java.math.BigInteger */
  public java.math.BigInteger revint6;
  /** member variable representing the sequence member revint7 of type java.math.BigInteger */
  public java.math.BigInteger revint7;
  /** member variable representing the sequence member revint8 of type java.math.BigInteger */
  public java.math.BigInteger revint8;
  /** member variable representing the sequence member revint9 of type java.math.BigInteger */
  public java.math.BigInteger revint9;
  /** member variable representing the sequence member revstr0 of type byte[] */
  public byte[] revstr0;
  /** member variable representing the sequence member revstr1 of type byte[] */
  public byte[] revstr1;
  /** member variable representing the sequence member revstr2 of type byte[] */
  public byte[] revstr2;
  /** member variable representing the sequence member revstr3 of type byte[] */
  public byte[] revstr3;
  /** member variable representing the sequence member revstr4 of type byte[] */
  public byte[] revstr4;
  /** member variable representing the sequence member revstr5 of type byte[] */
  public byte[] revstr5;
  /** member variable representing the sequence member revstr6 of type byte[] */
  public byte[] revstr6;

  /** default constructor */
  public UserPropertyInfo() {}

  /** copy constructor */
  public UserPropertyInfo (UserPropertyInfo arg) {
    uid = arg.uid;
    score = arg.score;
    charmnum = arg.charmnum;
    goldcoin = arg.goldcoin;
    silvercoin = arg.silvercoin;
    fakescore = arg.fakescore;
    totalscore = arg.totalscore;
    consumescore = arg.consumescore;
    totalgoldcoin = arg.totalgoldcoin;
    consumegoldcoin = arg.consumegoldcoin;
    totalsilvercoin = arg.totalsilvercoin;
    consumesilvercoin = arg.consumesilvercoin;
    fggoldcoin = arg.fggoldcoin;
    fakeauthscore = arg.fakeauthscore;
    fortunenum = arg.fortunenum;
    revint3 = arg.revint3;
    revint4 = arg.revint4;
    revint5 = arg.revint5;
    revint6 = arg.revint6;
    revint7 = arg.revint7;
    revint8 = arg.revint8;
    revint9 = arg.revint9;
    revstr0 = new byte[arg.revstr0.length];
    System.arraycopy(arg.revstr0,0,revstr0,0,arg.revstr0.length);
    revstr1 = new byte[arg.revstr1.length];
    System.arraycopy(arg.revstr1,0,revstr1,0,arg.revstr1.length);
    revstr2 = new byte[arg.revstr2.length];
    System.arraycopy(arg.revstr2,0,revstr2,0,arg.revstr2.length);
    revstr3 = new byte[arg.revstr3.length];
    System.arraycopy(arg.revstr3,0,revstr3,0,arg.revstr3.length);
    revstr4 = new byte[arg.revstr4.length];
    System.arraycopy(arg.revstr4,0,revstr4,0,arg.revstr4.length);
    revstr5 = new byte[arg.revstr5.length];
    System.arraycopy(arg.revstr5,0,revstr5,0,arg.revstr5.length);
    revstr6 = new byte[arg.revstr6.length];
    System.arraycopy(arg.revstr6,0,revstr6,0,arg.revstr6.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(uid);
    enc.encodeInteger(score);
    enc.encodeInteger(charmnum);
    enc.encodeInteger(goldcoin);
    enc.encodeInteger(silvercoin);
    enc.encodeInteger(fakescore);
    enc.encodeInteger(totalscore);
    enc.encodeInteger(consumescore);
    enc.encodeInteger(totalgoldcoin);
    enc.encodeInteger(consumegoldcoin);
    enc.encodeInteger(totalsilvercoin);
    enc.encodeInteger(consumesilvercoin);
    enc.encodeInteger(fggoldcoin);
    enc.encodeInteger(fakeauthscore);
    enc.encodeInteger(fortunenum);
    enc.encodeInteger(revint3);
    enc.encodeInteger(revint4);
    enc.encodeInteger(revint5);
    enc.encodeInteger(revint6);
    enc.encodeInteger(revint7);
    enc.encodeInteger(revint8);
    enc.encodeInteger(revint9);
    enc.encodeOctetString(revstr0);
    enc.encodeOctetString(revstr1);
    enc.encodeOctetString(revstr2);
    enc.encodeOctetString(revstr3);
    enc.encodeOctetString(revstr4);
    enc.encodeOctetString(revstr5);
    enc.encodeOctetString(revstr6);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    uid = dec.decodeInteger();
    score = dec.decodeInteger();
    charmnum = dec.decodeInteger();
    goldcoin = dec.decodeInteger();
    silvercoin = dec.decodeInteger();
    fakescore = dec.decodeInteger();
    totalscore = dec.decodeInteger();
    consumescore = dec.decodeInteger();
    totalgoldcoin = dec.decodeInteger();
    consumegoldcoin = dec.decodeInteger();
    totalsilvercoin = dec.decodeInteger();
    consumesilvercoin = dec.decodeInteger();
    fggoldcoin = dec.decodeInteger();
    fakeauthscore = dec.decodeInteger();
    fortunenum = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    revint4 = dec.decodeInteger();
    revint5 = dec.decodeInteger();
    revint6 = dec.decodeInteger();
    revint7 = dec.decodeInteger();
    revint8 = dec.decodeInteger();
    revint9 = dec.decodeInteger();
    revstr0 = dec.decodeOctetString();
    revstr1 = dec.decodeOctetString();
    revstr2 = dec.decodeOctetString();
    revstr3 = dec.decodeOctetString();
    revstr4 = dec.decodeOctetString();
    revstr5 = dec.decodeOctetString();
    revstr6 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("uid = ");
    os.print(uid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("score = ");
    os.print(score.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("charmnum = ");
    os.print(charmnum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("goldcoin = ");
    os.print(goldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("silvercoin = ");
    os.print(silvercoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("fakescore = ");
    os.print(fakescore.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalscore = ");
    os.print(totalscore.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("consumescore = ");
    os.print(consumescore.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalgoldcoin = ");
    os.print(totalgoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("consumegoldcoin = ");
    os.print(consumegoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalsilvercoin = ");
    os.print(totalsilvercoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("consumesilvercoin = ");
    os.print(consumesilvercoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("fggoldcoin = ");
    os.print(fggoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("fakeauthscore = ");
    os.print(fakeauthscore.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("fortunenum = ");
    os.print(fortunenum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint4 = ");
    os.print(revint4.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint5 = ");
    os.print(revint5.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint6 = ");
    os.print(revint6.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint7 = ");
    os.print(revint7.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint8 = ");
    os.print(revint8.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint9 = ");
    os.print(revint9.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr0 = ");
    os.print(Hex.toString(revstr0));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr1 = ");
    os.print(Hex.toString(revstr1));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr2 = ");
    os.print(Hex.toString(revstr2));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr3 = ");
    os.print(Hex.toString(revstr3));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr4 = ");
    os.print(Hex.toString(revstr4));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr5 = ");
    os.print(Hex.toString(revstr5));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr6 = ");
    os.print(Hex.toString(revstr6));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
