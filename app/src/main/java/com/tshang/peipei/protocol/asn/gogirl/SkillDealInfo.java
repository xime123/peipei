//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/SkillDealInfo.java
//
//   Java class for ASN.1 definition SkillDealInfo as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:16 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>SkillDealInfo</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class SkillDealInfo implements ASN1Type {

  /** member variable representing the sequence member id of type java.math.BigInteger */
  public java.math.BigInteger id;
  /** member variable representing the sequence member createtime of type java.math.BigInteger */
  public java.math.BigInteger createtime;
  /** member variable representing the sequence member skillinfo of type GGSkillInfo */
  public GGSkillInfo skillinfo = new GGSkillInfo();
  /** member variable representing the sequence member skilluid of type java.math.BigInteger */
  public java.math.BigInteger skilluid;
  /** member variable representing the sequence member skillnick of type byte[] */
  public byte[] skillnick;
  /** member variable representing the sequence member participateuid of type java.math.BigInteger */
  public java.math.BigInteger participateuid;
  /** member variable representing the sequence member participatenick of type byte[] */
  public byte[] participatenick;
  /** member variable representing the sequence member isdetain of type java.math.BigInteger */
  public java.math.BigInteger isdetain;
  /** member variable representing the sequence member isdeliver of type java.math.BigInteger */
  public java.math.BigInteger isdeliver;
  /** member variable representing the sequence member confirmtime of type java.math.BigInteger */
  public java.math.BigInteger confirmtime;
  /** member variable representing the sequence member point of type java.math.BigInteger */
  public java.math.BigInteger point;
  /** member variable representing the sequence member comment of type byte[] */
  public byte[] comment;
  /** member variable representing the sequence member status of type java.math.BigInteger */
  public java.math.BigInteger status;
  /** member variable representing the sequence member step of type java.math.BigInteger */
  public java.math.BigInteger step;
  /** member variable representing the sequence member revint0 of type java.math.BigInteger */
  public java.math.BigInteger revint0;
  /** member variable representing the sequence member revint1 of type java.math.BigInteger */
  public java.math.BigInteger revint1;
  /** member variable representing the sequence member revint2 of type java.math.BigInteger */
  public java.math.BigInteger revint2;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member revint4 of type java.math.BigInteger */
  public java.math.BigInteger revint4;
  /** member variable representing the sequence member revint5 of type java.math.BigInteger */
  public java.math.BigInteger revint5;
  /** member variable representing the sequence member revint6 of type java.math.BigInteger */
  public java.math.BigInteger revint6;
  /** member variable representing the sequence member revint7 of type java.math.BigInteger */
  public java.math.BigInteger revint7;
  /** member variable representing the sequence member revint8 of type java.math.BigInteger */
  public java.math.BigInteger revint8;
  /** member variable representing the sequence member revint9 of type java.math.BigInteger */
  public java.math.BigInteger revint9;
  /** member variable representing the sequence member revstr0 of type byte[] */
  public byte[] revstr0;
  /** member variable representing the sequence member revstr1 of type byte[] */
  public byte[] revstr1;
  /** member variable representing the sequence member revstr2 of type byte[] */
  public byte[] revstr2;
  /** member variable representing the sequence member revstr3 of type byte[] */
  public byte[] revstr3;
  /** member variable representing the sequence member revstr4 of type byte[] */
  public byte[] revstr4;

  /** default constructor */
  public SkillDealInfo() {}

  /** copy constructor */
  public SkillDealInfo (SkillDealInfo arg) {
    id = arg.id;
    createtime = arg.createtime;
    skillinfo = new GGSkillInfo(arg.skillinfo);
    skilluid = arg.skilluid;
    skillnick = new byte[arg.skillnick.length];
    System.arraycopy(arg.skillnick,0,skillnick,0,arg.skillnick.length);
    participateuid = arg.participateuid;
    participatenick = new byte[arg.participatenick.length];
    System.arraycopy(arg.participatenick,0,participatenick,0,arg.participatenick.length);
    isdetain = arg.isdetain;
    isdeliver = arg.isdeliver;
    confirmtime = arg.confirmtime;
    point = arg.point;
    comment = new byte[arg.comment.length];
    System.arraycopy(arg.comment,0,comment,0,arg.comment.length);
    status = arg.status;
    step = arg.step;
    revint0 = arg.revint0;
    revint1 = arg.revint1;
    revint2 = arg.revint2;
    revint3 = arg.revint3;
    revint4 = arg.revint4;
    revint5 = arg.revint5;
    revint6 = arg.revint6;
    revint7 = arg.revint7;
    revint8 = arg.revint8;
    revint9 = arg.revint9;
    revstr0 = new byte[arg.revstr0.length];
    System.arraycopy(arg.revstr0,0,revstr0,0,arg.revstr0.length);
    revstr1 = new byte[arg.revstr1.length];
    System.arraycopy(arg.revstr1,0,revstr1,0,arg.revstr1.length);
    revstr2 = new byte[arg.revstr2.length];
    System.arraycopy(arg.revstr2,0,revstr2,0,arg.revstr2.length);
    revstr3 = new byte[arg.revstr3.length];
    System.arraycopy(arg.revstr3,0,revstr3,0,arg.revstr3.length);
    revstr4 = new byte[arg.revstr4.length];
    System.arraycopy(arg.revstr4,0,revstr4,0,arg.revstr4.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(id);
    enc.encodeInteger(createtime);
    skillinfo.encode(enc);
    enc.encodeInteger(skilluid);
    enc.encodeOctetString(skillnick);
    enc.encodeInteger(participateuid);
    enc.encodeOctetString(participatenick);
    enc.encodeInteger(isdetain);
    enc.encodeInteger(isdeliver);
    enc.encodeInteger(confirmtime);
    enc.encodeInteger(point);
    enc.encodeOctetString(comment);
    enc.encodeInteger(status);
    enc.encodeInteger(step);
    enc.encodeInteger(revint0);
    enc.encodeInteger(revint1);
    enc.encodeInteger(revint2);
    enc.encodeInteger(revint3);
    enc.encodeInteger(revint4);
    enc.encodeInteger(revint5);
    enc.encodeInteger(revint6);
    enc.encodeInteger(revint7);
    enc.encodeInteger(revint8);
    enc.encodeInteger(revint9);
    enc.encodeOctetString(revstr0);
    enc.encodeOctetString(revstr1);
    enc.encodeOctetString(revstr2);
    enc.encodeOctetString(revstr3);
    enc.encodeOctetString(revstr4);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    id = dec.decodeInteger();
    createtime = dec.decodeInteger();
    skillinfo.decode(dec);
    skilluid = dec.decodeInteger();
    skillnick = dec.decodeOctetString();
    participateuid = dec.decodeInteger();
    participatenick = dec.decodeOctetString();
    isdetain = dec.decodeInteger();
    isdeliver = dec.decodeInteger();
    confirmtime = dec.decodeInteger();
    point = dec.decodeInteger();
    comment = dec.decodeOctetString();
    status = dec.decodeInteger();
    step = dec.decodeInteger();
    revint0 = dec.decodeInteger();
    revint1 = dec.decodeInteger();
    revint2 = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    revint4 = dec.decodeInteger();
    revint5 = dec.decodeInteger();
    revint6 = dec.decodeInteger();
    revint7 = dec.decodeInteger();
    revint8 = dec.decodeInteger();
    revint9 = dec.decodeInteger();
    revstr0 = dec.decodeOctetString();
    revstr1 = dec.decodeOctetString();
    revstr2 = dec.decodeOctetString();
    revstr3 = dec.decodeOctetString();
    revstr4 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("id = ");
    os.print(id.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("createtime = ");
    os.print(createtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("skillinfo = ");
    skillinfo.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("skilluid = ");
    os.print(skilluid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("skillnick = ");
    os.print(Hex.toString(skillnick));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("participateuid = ");
    os.print(participateuid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("participatenick = ");
    os.print(Hex.toString(participatenick));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("isdetain = ");
    os.print(isdetain.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("isdeliver = ");
    os.print(isdeliver.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("confirmtime = ");
    os.print(confirmtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("point = ");
    os.print(point.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("comment = ");
    os.print(Hex.toString(comment));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("status = ");
    os.print(status.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("step = ");
    os.print(step.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint0 = ");
    os.print(revint0.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint1 = ");
    os.print(revint1.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint2 = ");
    os.print(revint2.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint4 = ");
    os.print(revint4.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint5 = ");
    os.print(revint5.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint6 = ");
    os.print(revint6.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint7 = ");
    os.print(revint7.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint8 = ");
    os.print(revint8.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint9 = ");
    os.print(revint9.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr0 = ");
    os.print(Hex.toString(revstr0));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr1 = ");
    os.print(Hex.toString(revstr1));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr2 = ");
    os.print(Hex.toString(revstr2));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr3 = ");
    os.print(Hex.toString(revstr3));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr4 = ");
    os.print(Hex.toString(revstr4));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
