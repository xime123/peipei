//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/ReqSetFingerGuessing.java
//
//   Java class for ASN.1 definition ReqSetFingerGuessing as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:17 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>ReqSetFingerGuessing</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class ReqSetFingerGuessing implements ASN1Type {

  /** member variable representing the sequence member guessingstrid of type byte[] */
  public byte[] guessingstrid;
  /** member variable representing the sequence member playuid of type java.math.BigInteger */
  public java.math.BigInteger playuid;
  /** member variable representing the sequence member finger of type java.math.BigInteger */
  public java.math.BigInteger finger;
  /** member variable representing the sequence member peeruid of type java.math.BigInteger */
  public java.math.BigInteger peeruid;
  /** member variable representing the sequence member ante of type java.math.BigInteger */
  public java.math.BigInteger ante;
  /** member variable representing the sequence member antetype of type java.math.BigInteger */
  public java.math.BigInteger antetype;

  /** default constructor */
  public ReqSetFingerGuessing() {}

  /** copy constructor */
  public ReqSetFingerGuessing (ReqSetFingerGuessing arg) {
    guessingstrid = new byte[arg.guessingstrid.length];
    System.arraycopy(arg.guessingstrid,0,guessingstrid,0,arg.guessingstrid.length);
    playuid = arg.playuid;
    finger = arg.finger;
    peeruid = arg.peeruid;
    ante = arg.ante;
    antetype = arg.antetype;
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeOctetString(guessingstrid);
    enc.encodeInteger(playuid);
    enc.encodeInteger(finger);
    enc.encodeInteger(peeruid);
    enc.encodeInteger(ante);
    enc.encodeInteger(antetype);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    guessingstrid = dec.decodeOctetString();
    playuid = dec.decodeInteger();
    finger = dec.decodeInteger();
    peeruid = dec.decodeInteger();
    ante = dec.decodeInteger();
    antetype = dec.decodeInteger();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("guessingstrid = ");
    os.print(Hex.toString(guessingstrid));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("playuid = ");
    os.print(playuid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("finger = ");
    os.print(finger.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("peeruid = ");
    os.print(peeruid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("ante = ");
    os.print(ante.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("antetype = ");
    os.print(antetype.toString());
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
