//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/GoGirlUserInfo.java
//
//   Java class for ASN.1 definition GoGirlUserInfo as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:16 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>GoGirlUserInfo</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class GoGirlUserInfo implements ASN1Type {

  /** member variable representing the sequence member uid of type java.math.BigInteger */
  public java.math.BigInteger uid;
  /** member variable representing the sequence member username of type byte[] */
  public byte[] username;
  /** member variable representing the sequence member createtime of type java.math.BigInteger */
  public java.math.BigInteger createtime;
  /** member variable representing the sequence member nick of type byte[] */
  public byte[] nick;
  /** member variable representing the sequence member pwd of type byte[] */
  public byte[] pwd;
  /** member variable representing the sequence member email of type byte[] */
  public byte[] email;
  /** member variable representing the sequence member phone of type byte[] */
  public byte[] phone;
  /** member variable representing the sequence member sex of type java.math.BigInteger */
  public java.math.BigInteger sex;
  /** member variable representing the sequence member imei of type byte[] */
  public byte[] imei;
  /** member variable representing the sequence member osver of type byte[] */
  public byte[] osver;
  /** member variable representing the sequence member phoneos of type java.math.BigInteger */
  public java.math.BigInteger phoneos;
  /** member variable representing the sequence member phonebrand of type byte[] */
  public byte[] phonebrand;
  /** member variable representing the sequence member appver of type java.math.BigInteger */
  public java.math.BigInteger appver;
  /** member variable representing the sequence member lognum of type java.math.BigInteger */
  public java.math.BigInteger lognum;
  /** member variable representing the sequence member lastlogtime of type java.math.BigInteger */
  public java.math.BigInteger lastlogtime;
  /** member variable representing the sequence member token of type byte[] */
  public byte[] token;
  /** member variable representing the sequence member auth of type byte[] */
  public byte[] auth;
  /** member variable representing the sequence member authexpiretime of type java.math.BigInteger */
  public java.math.BigInteger authexpiretime;
  /** member variable representing the sequence member type of type java.math.BigInteger */
  public java.math.BigInteger type;
  /** member variable representing the sequence member birthday of type java.math.BigInteger */
  public java.math.BigInteger birthday;
  /** member variable representing the sequence member userstatus of type java.math.BigInteger */
  public java.math.BigInteger userstatus;
  /** member variable representing the sequence member headpickey of type byte[] */
  public byte[] headpickey;
  /** member variable representing the sequence member verifycode of type byte[] */
  public byte[] verifycode;
  /** member variable representing the sequence member nobreaklogs of type java.math.BigInteger */
  public java.math.BigInteger nobreaklogs;
  /** member variable representing the sequence member mailcode of type byte[] */
  public byte[] mailcode;
  /** member variable representing the sequence member city of type byte[] */
  public byte[] city;
  /** member variable representing the sequence member forbidtime of type java.math.BigInteger */
  public java.math.BigInteger forbidtime;
  /** member variable representing the sequence member showpickey of type byte[] */
  public byte[] showpickey;
  /** member variable representing the sequence member chatthreshold of type java.math.BigInteger */
  public java.math.BigInteger chatthreshold;
  /** member variable representing the sequence member ranknum of type java.math.BigInteger */
  public java.math.BigInteger ranknum;
  /** member variable representing the sequence member islocale of type java.math.BigInteger */
  public java.math.BigInteger islocale;
  /** member variable representing the sequence member inviteuid of type java.math.BigInteger */
  public java.math.BigInteger inviteuid;
  /** member variable representing the sequence member revint0 of type java.math.BigInteger */
  public java.math.BigInteger revint0;
  /** member variable representing the sequence member revint1 of type java.math.BigInteger */
  public java.math.BigInteger revint1;
  /** member variable representing the sequence member revint2 of type java.math.BigInteger */
  public java.math.BigInteger revint2;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member revint4 of type java.math.BigInteger */
  public java.math.BigInteger revint4;
  /** member variable representing the sequence member revint5 of type java.math.BigInteger */
  public java.math.BigInteger revint5;
  /** member variable representing the sequence member channel of type byte[] */
  public byte[] channel;
  /** member variable representing the sequence member gradeinfo of type byte[] */
  public byte[] gradeinfo;
  /** member variable representing the sequence member voicedesckey of type byte[] */
  public byte[] voicedesckey;
  /** member variable representing the sequence member authpickey of type byte[] */
  public byte[] authpickey;
  /** member variable representing the sequence member phonepwd of type byte[] */
  public byte[] phonepwd;
  /** member variable representing the sequence member firstrechargeinfo of type byte[] */
  public byte[] firstrechargeinfo;
  /** member variable representing the sequence member chatthreshholdgift of type byte[] */
  public byte[] chatthreshholdgift;
  /** member variable representing the sequence member revstr8 of type byte[] */
  public byte[] revstr8;
  /** member variable representing the sequence member revstr9 of type byte[] */
  public byte[] revstr9;
  /** member variable representing the sequence member revstr10 of type byte[] */
  public byte[] revstr10;

  /** default constructor */
  public GoGirlUserInfo() {}

  /** copy constructor */
  public GoGirlUserInfo (GoGirlUserInfo arg) {
    uid = arg.uid;
    username = new byte[arg.username.length];
    System.arraycopy(arg.username,0,username,0,arg.username.length);
    createtime = arg.createtime;
    nick = new byte[arg.nick.length];
    System.arraycopy(arg.nick,0,nick,0,arg.nick.length);
    pwd = new byte[arg.pwd.length];
    System.arraycopy(arg.pwd,0,pwd,0,arg.pwd.length);
    email = new byte[arg.email.length];
    System.arraycopy(arg.email,0,email,0,arg.email.length);
    phone = new byte[arg.phone.length];
    System.arraycopy(arg.phone,0,phone,0,arg.phone.length);
    sex = arg.sex;
    imei = new byte[arg.imei.length];
    System.arraycopy(arg.imei,0,imei,0,arg.imei.length);
    osver = new byte[arg.osver.length];
    System.arraycopy(arg.osver,0,osver,0,arg.osver.length);
    phoneos = arg.phoneos;
    phonebrand = new byte[arg.phonebrand.length];
    System.arraycopy(arg.phonebrand,0,phonebrand,0,arg.phonebrand.length);
    appver = arg.appver;
    lognum = arg.lognum;
    lastlogtime = arg.lastlogtime;
    token = new byte[arg.token.length];
    System.arraycopy(arg.token,0,token,0,arg.token.length);
    auth = new byte[arg.auth.length];
    System.arraycopy(arg.auth,0,auth,0,arg.auth.length);
    authexpiretime = arg.authexpiretime;
    type = arg.type;
    birthday = arg.birthday;
    userstatus = arg.userstatus;
    headpickey = new byte[arg.headpickey.length];
    System.arraycopy(arg.headpickey,0,headpickey,0,arg.headpickey.length);
    verifycode = new byte[arg.verifycode.length];
    System.arraycopy(arg.verifycode,0,verifycode,0,arg.verifycode.length);
    nobreaklogs = arg.nobreaklogs;
    mailcode = new byte[arg.mailcode.length];
    System.arraycopy(arg.mailcode,0,mailcode,0,arg.mailcode.length);
    city = new byte[arg.city.length];
    System.arraycopy(arg.city,0,city,0,arg.city.length);
    forbidtime = arg.forbidtime;
    showpickey = new byte[arg.showpickey.length];
    System.arraycopy(arg.showpickey,0,showpickey,0,arg.showpickey.length);
    chatthreshold = arg.chatthreshold;
    ranknum = arg.ranknum;
    islocale = arg.islocale;
    inviteuid = arg.inviteuid;
    revint0 = arg.revint0;
    revint1 = arg.revint1;
    revint2 = arg.revint2;
    revint3 = arg.revint3;
    revint4 = arg.revint4;
    revint5 = arg.revint5;
    channel = new byte[arg.channel.length];
    System.arraycopy(arg.channel,0,channel,0,arg.channel.length);
    gradeinfo = new byte[arg.gradeinfo.length];
    System.arraycopy(arg.gradeinfo,0,gradeinfo,0,arg.gradeinfo.length);
    voicedesckey = new byte[arg.voicedesckey.length];
    System.arraycopy(arg.voicedesckey,0,voicedesckey,0,arg.voicedesckey.length);
    authpickey = new byte[arg.authpickey.length];
    System.arraycopy(arg.authpickey,0,authpickey,0,arg.authpickey.length);
    phonepwd = new byte[arg.phonepwd.length];
    System.arraycopy(arg.phonepwd,0,phonepwd,0,arg.phonepwd.length);
    firstrechargeinfo = new byte[arg.firstrechargeinfo.length];
    System.arraycopy(arg.firstrechargeinfo,0,firstrechargeinfo,0,arg.firstrechargeinfo.length);
    chatthreshholdgift = new byte[arg.chatthreshholdgift.length];
    System.arraycopy(arg.chatthreshholdgift,0,chatthreshholdgift,0,arg.chatthreshholdgift.length);
    revstr8 = new byte[arg.revstr8.length];
    System.arraycopy(arg.revstr8,0,revstr8,0,arg.revstr8.length);
    revstr9 = new byte[arg.revstr9.length];
    System.arraycopy(arg.revstr9,0,revstr9,0,arg.revstr9.length);
    revstr10 = new byte[arg.revstr10.length];
    System.arraycopy(arg.revstr10,0,revstr10,0,arg.revstr10.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(uid);
    enc.encodeOctetString(username);
    enc.encodeInteger(createtime);
    enc.encodeOctetString(nick);
    enc.encodeOctetString(pwd);
    enc.encodeOctetString(email);
    enc.encodeOctetString(phone);
    enc.encodeInteger(sex);
    enc.encodeOctetString(imei);
    enc.encodeOctetString(osver);
    enc.encodeInteger(phoneos);
    enc.encodeOctetString(phonebrand);
    enc.encodeInteger(appver);
    enc.encodeInteger(lognum);
    enc.encodeInteger(lastlogtime);
    enc.encodeOctetString(token);
    enc.encodeOctetString(auth);
    enc.encodeInteger(authexpiretime);
    enc.encodeInteger(type);
    enc.encodeInteger(birthday);
    enc.encodeInteger(userstatus);
    enc.encodeOctetString(headpickey);
    enc.encodeOctetString(verifycode);
    enc.encodeInteger(nobreaklogs);
    enc.encodeOctetString(mailcode);
    enc.encodeOctetString(city);
    enc.encodeInteger(forbidtime);
    enc.encodeOctetString(showpickey);
    enc.encodeInteger(chatthreshold);
    enc.encodeInteger(ranknum);
    enc.encodeInteger(islocale);
    enc.encodeInteger(inviteuid);
    enc.encodeInteger(revint0);
    enc.encodeInteger(revint1);
    enc.encodeInteger(revint2);
    enc.encodeInteger(revint3);
    enc.encodeInteger(revint4);
    enc.encodeInteger(revint5);
    enc.encodeOctetString(channel);
    enc.encodeOctetString(gradeinfo);
    enc.encodeOctetString(voicedesckey);
    enc.encodeOctetString(authpickey);
    enc.encodeOctetString(phonepwd);
    enc.encodeOctetString(firstrechargeinfo);
    enc.encodeOctetString(chatthreshholdgift);
    enc.encodeOctetString(revstr8);
    enc.encodeOctetString(revstr9);
    enc.encodeOctetString(revstr10);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    uid = dec.decodeInteger();
    username = dec.decodeOctetString();
    createtime = dec.decodeInteger();
    nick = dec.decodeOctetString();
    pwd = dec.decodeOctetString();
    email = dec.decodeOctetString();
    phone = dec.decodeOctetString();
    sex = dec.decodeInteger();
    imei = dec.decodeOctetString();
    osver = dec.decodeOctetString();
    phoneos = dec.decodeInteger();
    phonebrand = dec.decodeOctetString();
    appver = dec.decodeInteger();
    lognum = dec.decodeInteger();
    lastlogtime = dec.decodeInteger();
    token = dec.decodeOctetString();
    auth = dec.decodeOctetString();
    authexpiretime = dec.decodeInteger();
    type = dec.decodeInteger();
    birthday = dec.decodeInteger();
    userstatus = dec.decodeInteger();
    headpickey = dec.decodeOctetString();
    verifycode = dec.decodeOctetString();
    nobreaklogs = dec.decodeInteger();
    mailcode = dec.decodeOctetString();
    city = dec.decodeOctetString();
    forbidtime = dec.decodeInteger();
    showpickey = dec.decodeOctetString();
    chatthreshold = dec.decodeInteger();
    ranknum = dec.decodeInteger();
    islocale = dec.decodeInteger();
    inviteuid = dec.decodeInteger();
    revint0 = dec.decodeInteger();
    revint1 = dec.decodeInteger();
    revint2 = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    revint4 = dec.decodeInteger();
    revint5 = dec.decodeInteger();
    channel = dec.decodeOctetString();
    gradeinfo = dec.decodeOctetString();
    voicedesckey = dec.decodeOctetString();
    authpickey = dec.decodeOctetString();
    phonepwd = dec.decodeOctetString();
    firstrechargeinfo = dec.decodeOctetString();
    chatthreshholdgift = dec.decodeOctetString();
    revstr8 = dec.decodeOctetString();
    revstr9 = dec.decodeOctetString();
    revstr10 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("uid = ");
    os.print(uid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("username = ");
    os.print(Hex.toString(username));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("createtime = ");
    os.print(createtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("nick = ");
    os.print(Hex.toString(nick));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("pwd = ");
    os.print(Hex.toString(pwd));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("email = ");
    os.print(Hex.toString(email));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phone = ");
    os.print(Hex.toString(phone));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("sex = ");
    os.print(sex.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("imei = ");
    os.print(Hex.toString(imei));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("osver = ");
    os.print(Hex.toString(osver));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phoneos = ");
    os.print(phoneos.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phonebrand = ");
    os.print(Hex.toString(phonebrand));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("appver = ");
    os.print(appver.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("lognum = ");
    os.print(lognum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("lastlogtime = ");
    os.print(lastlogtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("token = ");
    os.print(Hex.toString(token));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("auth = ");
    os.print(Hex.toString(auth));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("authexpiretime = ");
    os.print(authexpiretime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("type = ");
    os.print(type.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("birthday = ");
    os.print(birthday.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("userstatus = ");
    os.print(userstatus.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("headpickey = ");
    os.print(Hex.toString(headpickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("verifycode = ");
    os.print(Hex.toString(verifycode));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("nobreaklogs = ");
    os.print(nobreaklogs.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("mailcode = ");
    os.print(Hex.toString(mailcode));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("city = ");
    os.print(Hex.toString(city));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("forbidtime = ");
    os.print(forbidtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("showpickey = ");
    os.print(Hex.toString(showpickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("chatthreshold = ");
    os.print(chatthreshold.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("ranknum = ");
    os.print(ranknum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("islocale = ");
    os.print(islocale.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("inviteuid = ");
    os.print(inviteuid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint0 = ");
    os.print(revint0.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint1 = ");
    os.print(revint1.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint2 = ");
    os.print(revint2.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint4 = ");
    os.print(revint4.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint5 = ");
    os.print(revint5.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("channel = ");
    os.print(Hex.toString(channel));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("gradeinfo = ");
    os.print(Hex.toString(gradeinfo));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("voicedesckey = ");
    os.print(Hex.toString(voicedesckey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("authpickey = ");
    os.print(Hex.toString(authpickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phonepwd = ");
    os.print(Hex.toString(phonepwd));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("firstrechargeinfo = ");
    os.print(Hex.toString(firstrechargeinfo));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("chatthreshholdgift = ");
    os.print(Hex.toString(chatthreshholdgift));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr8 = ");
    os.print(Hex.toString(revstr8));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr9 = ");
    os.print(Hex.toString(revstr9));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr10 = ");
    os.print(Hex.toString(revstr10));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
