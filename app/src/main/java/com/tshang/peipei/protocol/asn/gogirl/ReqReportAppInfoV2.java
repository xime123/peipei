//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/ReqReportAppInfoV2.java
//
//   Java class for ASN.1 definition ReqReportAppInfoV2 as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:17 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>ReqReportAppInfoV2</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class ReqReportAppInfoV2 implements ASN1Type {

  /** member variable representing the sequence member uid of type java.math.BigInteger */
  public java.math.BigInteger uid;
  /** member variable representing the sequence member osver of type byte[] */
  public byte[] osver;
  /** member variable representing the sequence member phoneos of type java.math.BigInteger */
  public java.math.BigInteger phoneos;
  /** member variable representing the sequence member phonebrand of type byte[] */
  public byte[] phonebrand;
  /** member variable representing the sequence member token of type byte[] */
  public byte[] token;
  /** member variable representing the sequence member appver of type java.math.BigInteger */
  public java.math.BigInteger appver;
  /** member variable representing the sequence member channel of type byte[] */
  public byte[] channel;

  /** default constructor */
  public ReqReportAppInfoV2() {}

  /** copy constructor */
  public ReqReportAppInfoV2 (ReqReportAppInfoV2 arg) {
    uid = arg.uid;
    osver = new byte[arg.osver.length];
    System.arraycopy(arg.osver,0,osver,0,arg.osver.length);
    phoneos = arg.phoneos;
    phonebrand = new byte[arg.phonebrand.length];
    System.arraycopy(arg.phonebrand,0,phonebrand,0,arg.phonebrand.length);
    token = new byte[arg.token.length];
    System.arraycopy(arg.token,0,token,0,arg.token.length);
    appver = arg.appver;
    channel = new byte[arg.channel.length];
    System.arraycopy(arg.channel,0,channel,0,arg.channel.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(uid);
    enc.encodeOctetString(osver);
    enc.encodeInteger(phoneos);
    enc.encodeOctetString(phonebrand);
    enc.encodeOctetString(token);
    enc.encodeInteger(appver);
    enc.encodeOctetString(channel);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    uid = dec.decodeInteger();
    osver = dec.decodeOctetString();
    phoneos = dec.decodeInteger();
    phonebrand = dec.decodeOctetString();
    token = dec.decodeOctetString();
    appver = dec.decodeInteger();
    channel = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("uid = ");
    os.print(uid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("osver = ");
    os.print(Hex.toString(osver));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phoneos = ");
    os.print(phoneos.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("phonebrand = ");
    os.print(Hex.toString(phonebrand));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("token = ");
    os.print(Hex.toString(token));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("appver = ");
    os.print(appver.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("channel = ");
    os.print(Hex.toString(channel));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
