//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/EndJoinDare.java
//
//   Java class for ASN.1 definition EndJoinDare as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Wed Jun 17 18:16:32 2015
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>EndJoinDare</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Wed Jun 17 18:16:31 2015

  */

public class EndJoinDare implements ASN1Type {

  /** member variable representing the sequence member dareid of type byte[] */
  public byte[] dareid;
  /** member variable representing the sequence member groupid of type java.math.BigInteger */
  public java.math.BigInteger groupid;
  /** member variable representing the sequence member flag of type java.math.BigInteger */
  public java.math.BigInteger flag;
  /** member variable representing the sequence member loseruid of type DareUserInfoList */
  public DareUserInfoList loseruid = new DareUserInfoList();
  /** member variable representing the sequence member topic of type byte[] */
  public byte[] topic;
  /** member variable representing the sequence member fine of type java.math.BigInteger */
  public java.math.BigInteger fine;

  /** default constructor */
  public EndJoinDare() {}

  /** copy constructor */
  public EndJoinDare (EndJoinDare arg) {
    dareid = new byte[arg.dareid.length];
    System.arraycopy(arg.dareid,0,dareid,0,arg.dareid.length);
    groupid = arg.groupid;
    flag = arg.flag;
    loseruid = new DareUserInfoList(arg.loseruid);
    topic = new byte[arg.topic.length];
    System.arraycopy(arg.topic,0,topic,0,arg.topic.length);
    fine = arg.fine;
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeOctetString(dareid);
    enc.encodeInteger(groupid);
    enc.encodeInteger(flag);
    loseruid.encode(enc);
    enc.encodeOctetString(topic);
    enc.encodeInteger(fine);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    dareid = dec.decodeOctetString();
    groupid = dec.decodeInteger();
    flag = dec.decodeInteger();
    loseruid.decode(dec);
    topic = dec.decodeOctetString();
    fine = dec.decodeInteger();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("dareid = ");
    os.print(Hex.toString(dareid));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("groupid = ");
    os.print(groupid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("flag = ");
    os.print(flag.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("loseruid = ");
    loseruid.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("topic = ");
    os.print(Hex.toString(topic));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("fine = ");
    os.print(fine.toString());
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
