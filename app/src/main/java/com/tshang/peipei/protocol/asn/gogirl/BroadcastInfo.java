//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/BroadcastInfo.java
//
//   Java class for ASN.1 definition BroadcastInfo as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:16 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>BroadcastInfo</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class BroadcastInfo implements ASN1Type {

  /** member variable representing the sequence member id of type java.math.BigInteger */
  public java.math.BigInteger id;
  /** member variable representing the sequence member broadcasttype of type java.math.BigInteger */
  public java.math.BigInteger broadcasttype;
  /** member variable representing the sequence member createtime of type java.math.BigInteger */
  public java.math.BigInteger createtime;
  /** member variable representing the sequence member senduser of type GoGirlUserInfo */
  public GoGirlUserInfo senduser = new GoGirlUserInfo();
  /** member variable representing the sequence member contenttxt of type byte[] */
  public byte[] contenttxt;
  /** member variable representing the sequence member tousers of type GoGirlUserInfoList */
  public GoGirlUserInfoList tousers = new GoGirlUserInfoList();
  /** member variable representing the sequence member broadcaststatus of type java.math.BigInteger */
  public java.math.BigInteger broadcaststatus;
  /** member variable representing the sequence member animationid of type java.math.BigInteger */
  public java.math.BigInteger animationid;
  /** member variable representing the sequence member revint1 of type java.math.BigInteger */
  public java.math.BigInteger revint1;
  /** member variable representing the sequence member revint2 of type java.math.BigInteger */
  public java.math.BigInteger revint2;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member voiceinfo of type byte[] */
  public byte[] voiceinfo;
  /** member variable representing the sequence member pickey of type byte[] */
  public byte[] pickey;
  /** member variable representing the sequence member datalist of type byte[] */
  public byte[] datalist;
  /** member variable representing the sequence member revstr3 of type byte[] */
  public byte[] revstr3;
  /** member variable representing the sequence member revstr4 of type byte[] */
  public byte[] revstr4;
  /** member variable representing the sequence member revstr5 of type byte[] */
  public byte[] revstr5;
  /** member variable representing the sequence member revstr6 of type byte[] */
  public byte[] revstr6;
  /** member variable representing the sequence member revstr7 of type byte[] */
  public byte[] revstr7;

  /** default constructor */
  public BroadcastInfo() {}

  /** copy constructor */
  public BroadcastInfo (BroadcastInfo arg) {
    id = arg.id;
    broadcasttype = arg.broadcasttype;
    createtime = arg.createtime;
    senduser = new GoGirlUserInfo(arg.senduser);
    contenttxt = new byte[arg.contenttxt.length];
    System.arraycopy(arg.contenttxt,0,contenttxt,0,arg.contenttxt.length);
    tousers = new GoGirlUserInfoList(arg.tousers);
    broadcaststatus = arg.broadcaststatus;
    animationid = arg.animationid;
    revint1 = arg.revint1;
    revint2 = arg.revint2;
    revint3 = arg.revint3;
    voiceinfo = new byte[arg.voiceinfo.length];
    System.arraycopy(arg.voiceinfo,0,voiceinfo,0,arg.voiceinfo.length);
    pickey = new byte[arg.pickey.length];
    System.arraycopy(arg.pickey,0,pickey,0,arg.pickey.length);
    datalist = new byte[arg.datalist.length];
    System.arraycopy(arg.datalist,0,datalist,0,arg.datalist.length);
    revstr3 = new byte[arg.revstr3.length];
    System.arraycopy(arg.revstr3,0,revstr3,0,arg.revstr3.length);
    revstr4 = new byte[arg.revstr4.length];
    System.arraycopy(arg.revstr4,0,revstr4,0,arg.revstr4.length);
    revstr5 = new byte[arg.revstr5.length];
    System.arraycopy(arg.revstr5,0,revstr5,0,arg.revstr5.length);
    revstr6 = new byte[arg.revstr6.length];
    System.arraycopy(arg.revstr6,0,revstr6,0,arg.revstr6.length);
    revstr7 = new byte[arg.revstr7.length];
    System.arraycopy(arg.revstr7,0,revstr7,0,arg.revstr7.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(id);
    enc.encodeInteger(broadcasttype);
    enc.encodeInteger(createtime);
    senduser.encode(enc);
    enc.encodeOctetString(contenttxt);
    tousers.encode(enc);
    enc.encodeInteger(broadcaststatus);
    enc.encodeInteger(animationid);
    enc.encodeInteger(revint1);
    enc.encodeInteger(revint2);
    enc.encodeInteger(revint3);
    enc.encodeOctetString(voiceinfo);
    enc.encodeOctetString(pickey);
    enc.encodeOctetString(datalist);
    enc.encodeOctetString(revstr3);
    enc.encodeOctetString(revstr4);
    enc.encodeOctetString(revstr5);
    enc.encodeOctetString(revstr6);
    enc.encodeOctetString(revstr7);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    id = dec.decodeInteger();
    broadcasttype = dec.decodeInteger();
    createtime = dec.decodeInteger();
    senduser.decode(dec);
    contenttxt = dec.decodeOctetString();
    tousers.decode(dec);
    broadcaststatus = dec.decodeInteger();
    animationid = dec.decodeInteger();
    revint1 = dec.decodeInteger();
    revint2 = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    voiceinfo = dec.decodeOctetString();
    pickey = dec.decodeOctetString();
    datalist = dec.decodeOctetString();
    revstr3 = dec.decodeOctetString();
    revstr4 = dec.decodeOctetString();
    revstr5 = dec.decodeOctetString();
    revstr6 = dec.decodeOctetString();
    revstr7 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("id = ");
    os.print(id.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("broadcasttype = ");
    os.print(broadcasttype.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("createtime = ");
    os.print(createtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("senduser = ");
    senduser.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("contenttxt = ");
    os.print(Hex.toString(contenttxt));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("tousers = ");
    tousers.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("broadcaststatus = ");
    os.print(broadcaststatus.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("animationid = ");
    os.print(animationid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint1 = ");
    os.print(revint1.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint2 = ");
    os.print(revint2.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("voiceinfo = ");
    os.print(Hex.toString(voiceinfo));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("pickey = ");
    os.print(Hex.toString(pickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("datalist = ");
    os.print(Hex.toString(datalist));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr3 = ");
    os.print(Hex.toString(revstr3));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr4 = ");
    os.print(Hex.toString(revstr4));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr5 = ");
    os.print(Hex.toString(revstr5));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr6 = ");
    os.print(Hex.toString(revstr6));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr7 = ");
    os.print(Hex.toString(revstr7));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
