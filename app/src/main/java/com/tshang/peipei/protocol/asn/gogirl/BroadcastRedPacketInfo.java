//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/BroadcastRedPacketInfo.java
//
//   Java class for ASN.1 definition BroadcastRedPacketInfo as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:19 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>BroadcastRedPacketInfo</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class BroadcastRedPacketInfo implements ASN1Type {

  /** member variable representing the sequence member id of type java.math.BigInteger */
  public java.math.BigInteger id;
  /** member variable representing the sequence member type of type java.math.BigInteger */
  public java.math.BigInteger type;
  /** member variable representing the sequence member createtime of type java.math.BigInteger */
  public java.math.BigInteger createtime;
  /** member variable representing the sequence member userInfo of type GoGirlUserInfo */
  public GoGirlUserInfo userInfo = new GoGirlUserInfo();
  /** member variable representing the sequence member totalgoldcoin of type java.math.BigInteger */
  public java.math.BigInteger totalgoldcoin;
  /** member variable representing the sequence member totalsilvercoin of type java.math.BigInteger */
  public java.math.BigInteger totalsilvercoin;
  /** member variable representing the sequence member leftgoldcoin of type java.math.BigInteger */
  public java.math.BigInteger leftgoldcoin;
  /** member variable representing the sequence member totalportionnum of type java.math.BigInteger */
  public java.math.BigInteger totalportionnum;
  /** member variable representing the sequence member leftportionnum of type java.math.BigInteger */
  public java.math.BigInteger leftportionnum;
  /** member variable representing the sequence member desc of type byte[] */
  public byte[] desc;
  /** member variable representing the sequence member records of type GoGirlUserInfoList */
  public GoGirlUserInfoList records = new GoGirlUserInfoList();
  /** member variable representing the sequence member endtime of type java.math.BigInteger */
  public java.math.BigInteger endtime;
  /** member variable representing the sequence member getgoldcoin of type java.math.BigInteger */
  public java.math.BigInteger getgoldcoin;
  /** member variable representing the sequence member maxgoldcoin of type java.math.BigInteger */
  public java.math.BigInteger maxgoldcoin;
  /** member variable representing the sequence member cointype of type java.math.BigInteger */
  public java.math.BigInteger cointype;
  /** member variable representing the sequence member timeouttime of type java.math.BigInteger */
  public java.math.BigInteger timeouttime;
  /** member variable representing the sequence member needtime of type java.math.BigInteger */
  public java.math.BigInteger needtime;
  /** member variable representing the sequence member coinlist of type GoGirlIntList */
  public GoGirlIntList coinlist = new GoGirlIntList();
  /** member variable representing the sequence member redpacketstatus of type java.math.BigInteger */
  public java.math.BigInteger redpacketstatus;
  /** member variable representing the sequence member revint0 of type java.math.BigInteger */
  public java.math.BigInteger revint0;
  /** member variable representing the sequence member revint1 of type java.math.BigInteger */
  public java.math.BigInteger revint1;
  /** member variable representing the sequence member revint2 of type java.math.BigInteger */
  public java.math.BigInteger revint2;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member revint4 of type java.math.BigInteger */
  public java.math.BigInteger revint4;
  /** member variable representing the sequence member revint5 of type java.math.BigInteger */
  public java.math.BigInteger revint5;
  /** member variable representing the sequence member revint6 of type java.math.BigInteger */
  public java.math.BigInteger revint6;
  /** member variable representing the sequence member revstr1 of type byte[] */
  public byte[] revstr1;
  /** member variable representing the sequence member revstr2 of type byte[] */
  public byte[] revstr2;
  /** member variable representing the sequence member revstr3 of type byte[] */
  public byte[] revstr3;
  /** member variable representing the sequence member revstr4 of type byte[] */
  public byte[] revstr4;
  /** member variable representing the sequence member revstr5 of type byte[] */
  public byte[] revstr5;
  /** member variable representing the sequence member revstr6 of type byte[] */
  public byte[] revstr6;

  /** default constructor */
  public BroadcastRedPacketInfo() {}

  /** copy constructor */
  public BroadcastRedPacketInfo (BroadcastRedPacketInfo arg) {
    id = arg.id;
    type = arg.type;
    createtime = arg.createtime;
    userInfo = new GoGirlUserInfo(arg.userInfo);
    totalgoldcoin = arg.totalgoldcoin;
    totalsilvercoin = arg.totalsilvercoin;
    leftgoldcoin = arg.leftgoldcoin;
    totalportionnum = arg.totalportionnum;
    leftportionnum = arg.leftportionnum;
    desc = new byte[arg.desc.length];
    System.arraycopy(arg.desc,0,desc,0,arg.desc.length);
    records = new GoGirlUserInfoList(arg.records);
    endtime = arg.endtime;
    getgoldcoin = arg.getgoldcoin;
    maxgoldcoin = arg.maxgoldcoin;
    cointype = arg.cointype;
    timeouttime = arg.timeouttime;
    needtime = arg.needtime;
    coinlist = new GoGirlIntList(arg.coinlist);
    redpacketstatus = arg.redpacketstatus;
    revint0 = arg.revint0;
    revint1 = arg.revint1;
    revint2 = arg.revint2;
    revint3 = arg.revint3;
    revint4 = arg.revint4;
    revint5 = arg.revint5;
    revint6 = arg.revint6;
    revstr1 = new byte[arg.revstr1.length];
    System.arraycopy(arg.revstr1,0,revstr1,0,arg.revstr1.length);
    revstr2 = new byte[arg.revstr2.length];
    System.arraycopy(arg.revstr2,0,revstr2,0,arg.revstr2.length);
    revstr3 = new byte[arg.revstr3.length];
    System.arraycopy(arg.revstr3,0,revstr3,0,arg.revstr3.length);
    revstr4 = new byte[arg.revstr4.length];
    System.arraycopy(arg.revstr4,0,revstr4,0,arg.revstr4.length);
    revstr5 = new byte[arg.revstr5.length];
    System.arraycopy(arg.revstr5,0,revstr5,0,arg.revstr5.length);
    revstr6 = new byte[arg.revstr6.length];
    System.arraycopy(arg.revstr6,0,revstr6,0,arg.revstr6.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(id);
    enc.encodeInteger(type);
    enc.encodeInteger(createtime);
    userInfo.encode(enc);
    enc.encodeInteger(totalgoldcoin);
    enc.encodeInteger(totalsilvercoin);
    enc.encodeInteger(leftgoldcoin);
    enc.encodeInteger(totalportionnum);
    enc.encodeInteger(leftportionnum);
    enc.encodeOctetString(desc);
    records.encode(enc);
    enc.encodeInteger(endtime);
    enc.encodeInteger(getgoldcoin);
    enc.encodeInteger(maxgoldcoin);
    enc.encodeInteger(cointype);
    enc.encodeInteger(timeouttime);
    enc.encodeInteger(needtime);
    coinlist.encode(enc);
    enc.encodeInteger(redpacketstatus);
    enc.encodeInteger(revint0);
    enc.encodeInteger(revint1);
    enc.encodeInteger(revint2);
    enc.encodeInteger(revint3);
    enc.encodeInteger(revint4);
    enc.encodeInteger(revint5);
    enc.encodeInteger(revint6);
    enc.encodeOctetString(revstr1);
    enc.encodeOctetString(revstr2);
    enc.encodeOctetString(revstr3);
    enc.encodeOctetString(revstr4);
    enc.encodeOctetString(revstr5);
    enc.encodeOctetString(revstr6);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    id = dec.decodeInteger();
    type = dec.decodeInteger();
    createtime = dec.decodeInteger();
    userInfo.decode(dec);
    totalgoldcoin = dec.decodeInteger();
    totalsilvercoin = dec.decodeInteger();
    leftgoldcoin = dec.decodeInteger();
    totalportionnum = dec.decodeInteger();
    leftportionnum = dec.decodeInteger();
    desc = dec.decodeOctetString();
    records.decode(dec);
    endtime = dec.decodeInteger();
    getgoldcoin = dec.decodeInteger();
    maxgoldcoin = dec.decodeInteger();
    cointype = dec.decodeInteger();
    timeouttime = dec.decodeInteger();
    needtime = dec.decodeInteger();
    coinlist.decode(dec);
    redpacketstatus = dec.decodeInteger();
    revint0 = dec.decodeInteger();
    revint1 = dec.decodeInteger();
    revint2 = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    revint4 = dec.decodeInteger();
    revint5 = dec.decodeInteger();
    revint6 = dec.decodeInteger();
    revstr1 = dec.decodeOctetString();
    revstr2 = dec.decodeOctetString();
    revstr3 = dec.decodeOctetString();
    revstr4 = dec.decodeOctetString();
    revstr5 = dec.decodeOctetString();
    revstr6 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("id = ");
    os.print(id.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("type = ");
    os.print(type.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("createtime = ");
    os.print(createtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("userInfo = ");
    userInfo.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalgoldcoin = ");
    os.print(totalgoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalsilvercoin = ");
    os.print(totalsilvercoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("leftgoldcoin = ");
    os.print(leftgoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("totalportionnum = ");
    os.print(totalportionnum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("leftportionnum = ");
    os.print(leftportionnum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("desc = ");
    os.print(Hex.toString(desc));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("records = ");
    records.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("endtime = ");
    os.print(endtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("getgoldcoin = ");
    os.print(getgoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("maxgoldcoin = ");
    os.print(maxgoldcoin.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("cointype = ");
    os.print(cointype.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("timeouttime = ");
    os.print(timeouttime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("needtime = ");
    os.print(needtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("coinlist = ");
    coinlist.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("redpacketstatus = ");
    os.print(redpacketstatus.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint0 = ");
    os.print(revint0.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint1 = ");
    os.print(revint1.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint2 = ");
    os.print(revint2.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint4 = ");
    os.print(revint4.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint5 = ");
    os.print(revint5.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint6 = ");
    os.print(revint6.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr1 = ");
    os.print(Hex.toString(revstr1));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr2 = ");
    os.print(Hex.toString(revstr2));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr3 = ");
    os.print(Hex.toString(revstr3));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr4 = ");
    os.print(Hex.toString(revstr4));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr5 = ");
    os.print(Hex.toString(revstr5));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr6 = ");
    os.print(Hex.toString(revstr6));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
