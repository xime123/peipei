//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/tshang/peipei/protocol/asn/gogirl/AwardDetail.java
//
//   Java class for ASN.1 definition AwardDetail as defined in
//   module GOGIRL.
//   This file was generated by Snacc for Java at Tue Jan 26 18:38:19 2016
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.gogirl;

// Import PrintStream class for print methods
import java.io.PrintStream;

// Import ASN.1 basic type representations
import com.ibm.util.*;

// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.*;

/** This class represents the ASN.1 SEQUENCE type <tt>AwardDetail</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Tue Jan 26 18:38:16 2016

  */

public class AwardDetail implements ASN1Type {

  /** member variable representing the sequence member id of type java.math.BigInteger */
  public java.math.BigInteger id;
  /** member variable representing the sequence member globalawardid of type java.math.BigInteger */
  public java.math.BigInteger globalawardid;
  /** member variable representing the sequence member onlineawardid of type java.math.BigInteger */
  public java.math.BigInteger onlineawardid;
  /** member variable representing the sequence member finishawardid of type java.math.BigInteger */
  public java.math.BigInteger finishawardid;
  /** member variable representing the sequence member selfpublictionawardid of type java.math.BigInteger */
  public java.math.BigInteger selfpublictionawardid;
  /** member variable representing the sequence member selfparticipateawardid of type java.math.BigInteger */
  public java.math.BigInteger selfparticipateawardid;
  /** member variable representing the sequence member selfwinawardid of type java.math.BigInteger */
  public java.math.BigInteger selfwinawardid;
  /** member variable representing the sequence member uid of type java.math.BigInteger */
  public java.math.BigInteger uid;
  /** member variable representing the sequence member nick of type byte[] */
  public byte[] nick;
  /** member variable representing the sequence member sex of type java.math.BigInteger */
  public java.math.BigInteger sex;
  /** member variable representing the sequence member headpickey of type byte[] */
  public byte[] headpickey;
  /** member variable representing the sequence member winuid of type java.math.BigInteger */
  public java.math.BigInteger winuid;
  /** member variable representing the sequence member winnick of type byte[] */
  public byte[] winnick;
  /** member variable representing the sequence member winsex of type java.math.BigInteger */
  public java.math.BigInteger winsex;
  /** member variable representing the sequence member winheadpickey of type byte[] */
  public byte[] winheadpickey;
  /** member variable representing the sequence member createtime of type java.math.BigInteger */
  public java.math.BigInteger createtime;
  /** member variable representing the sequence member endtime of type java.math.BigInteger */
  public java.math.BigInteger endtime;
  /** member variable representing the sequence member leftime of type java.math.BigInteger */
  public java.math.BigInteger leftime;
  /** member variable representing the sequence member isanonymous of type java.math.BigInteger */
  public java.math.BigInteger isanonymous;
  /** member variable representing the sequence member awardstatus of type java.math.BigInteger */
  public java.math.BigInteger awardstatus;
  /** member variable representing the sequence member awardtype of type java.math.BigInteger */
  public java.math.BigInteger awardtype;
  /** member variable representing the sequence member awardTextInfo of type AwardTextInfo */
  public AwardTextInfo awardTextInfo = new AwardTextInfo();
  /** member variable representing the sequence member awardGiftInfo of type AwardGiftInfo */
  public AwardGiftInfo awardGiftInfo = new AwardGiftInfo();
  /** member variable representing the sequence member participateInfoList of type ParticipateInfoList */
  public ParticipateInfoList participateInfoList = new ParticipateInfoList();
  /** member variable representing the sequence member maxparticipatenum of type java.math.BigInteger */
  public java.math.BigInteger maxparticipatenum;
  /** member variable representing the sequence member issndaward of type java.math.BigInteger */
  public java.math.BigInteger issndaward;
  /** member variable representing the sequence member revint0 of type java.math.BigInteger */
  public java.math.BigInteger revint0;
  /** member variable representing the sequence member revint1 of type java.math.BigInteger */
  public java.math.BigInteger revint1;
  /** member variable representing the sequence member revint2 of type java.math.BigInteger */
  public java.math.BigInteger revint2;
  /** member variable representing the sequence member revint3 of type java.math.BigInteger */
  public java.math.BigInteger revint3;
  /** member variable representing the sequence member revint4 of type java.math.BigInteger */
  public java.math.BigInteger revint4;
  /** member variable representing the sequence member revint5 of type java.math.BigInteger */
  public java.math.BigInteger revint5;
  /** member variable representing the sequence member revint6 of type java.math.BigInteger */
  public java.math.BigInteger revint6;
  /** member variable representing the sequence member revstr0 of type byte[] */
  public byte[] revstr0;
  /** member variable representing the sequence member revstr1 of type byte[] */
  public byte[] revstr1;
  /** member variable representing the sequence member revstr2 of type byte[] */
  public byte[] revstr2;
  /** member variable representing the sequence member revstr3 of type byte[] */
  public byte[] revstr3;
  /** member variable representing the sequence member revstr4 of type byte[] */
  public byte[] revstr4;
  /** member variable representing the sequence member revstr5 of type byte[] */
  public byte[] revstr5;
  /** member variable representing the sequence member revstr6 of type byte[] */
  public byte[] revstr6;

  /** default constructor */
  public AwardDetail() {}

  /** copy constructor */
  public AwardDetail (AwardDetail arg) {
    id = arg.id;
    globalawardid = arg.globalawardid;
    onlineawardid = arg.onlineawardid;
    finishawardid = arg.finishawardid;
    selfpublictionawardid = arg.selfpublictionawardid;
    selfparticipateawardid = arg.selfparticipateawardid;
    selfwinawardid = arg.selfwinawardid;
    uid = arg.uid;
    nick = new byte[arg.nick.length];
    System.arraycopy(arg.nick,0,nick,0,arg.nick.length);
    sex = arg.sex;
    headpickey = new byte[arg.headpickey.length];
    System.arraycopy(arg.headpickey,0,headpickey,0,arg.headpickey.length);
    winuid = arg.winuid;
    winnick = new byte[arg.winnick.length];
    System.arraycopy(arg.winnick,0,winnick,0,arg.winnick.length);
    winsex = arg.winsex;
    winheadpickey = new byte[arg.winheadpickey.length];
    System.arraycopy(arg.winheadpickey,0,winheadpickey,0,arg.winheadpickey.length);
    createtime = arg.createtime;
    endtime = arg.endtime;
    leftime = arg.leftime;
    isanonymous = arg.isanonymous;
    awardstatus = arg.awardstatus;
    awardtype = arg.awardtype;
    awardTextInfo = new AwardTextInfo(arg.awardTextInfo);
    awardGiftInfo = new AwardGiftInfo(arg.awardGiftInfo);
    participateInfoList = new ParticipateInfoList(arg.participateInfoList);
    maxparticipatenum = arg.maxparticipatenum;
    issndaward = arg.issndaward;
    revint0 = arg.revint0;
    revint1 = arg.revint1;
    revint2 = arg.revint2;
    revint3 = arg.revint3;
    revint4 = arg.revint4;
    revint5 = arg.revint5;
    revint6 = arg.revint6;
    revstr0 = new byte[arg.revstr0.length];
    System.arraycopy(arg.revstr0,0,revstr0,0,arg.revstr0.length);
    revstr1 = new byte[arg.revstr1.length];
    System.arraycopy(arg.revstr1,0,revstr1,0,arg.revstr1.length);
    revstr2 = new byte[arg.revstr2.length];
    System.arraycopy(arg.revstr2,0,revstr2,0,arg.revstr2.length);
    revstr3 = new byte[arg.revstr3.length];
    System.arraycopy(arg.revstr3,0,revstr3,0,arg.revstr3.length);
    revstr4 = new byte[arg.revstr4.length];
    System.arraycopy(arg.revstr4,0,revstr4,0,arg.revstr4.length);
    revstr5 = new byte[arg.revstr5.length];
    System.arraycopy(arg.revstr5,0,revstr5,0,arg.revstr5.length);
    revstr6 = new byte[arg.revstr6.length];
    System.arraycopy(arg.revstr6,0,revstr6,0,arg.revstr6.length);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(id);
    enc.encodeInteger(globalawardid);
    enc.encodeInteger(onlineawardid);
    enc.encodeInteger(finishawardid);
    enc.encodeInteger(selfpublictionawardid);
    enc.encodeInteger(selfparticipateawardid);
    enc.encodeInteger(selfwinawardid);
    enc.encodeInteger(uid);
    enc.encodeOctetString(nick);
    enc.encodeInteger(sex);
    enc.encodeOctetString(headpickey);
    enc.encodeInteger(winuid);
    enc.encodeOctetString(winnick);
    enc.encodeInteger(winsex);
    enc.encodeOctetString(winheadpickey);
    enc.encodeInteger(createtime);
    enc.encodeInteger(endtime);
    enc.encodeInteger(leftime);
    enc.encodeInteger(isanonymous);
    enc.encodeInteger(awardstatus);
    enc.encodeInteger(awardtype);
    awardTextInfo.encode(enc);
    awardGiftInfo.encode(enc);
    participateInfoList.encode(enc);
    enc.encodeInteger(maxparticipatenum);
    enc.encodeInteger(issndaward);
    enc.encodeInteger(revint0);
    enc.encodeInteger(revint1);
    enc.encodeInteger(revint2);
    enc.encodeInteger(revint3);
    enc.encodeInteger(revint4);
    enc.encodeInteger(revint5);
    enc.encodeInteger(revint6);
    enc.encodeOctetString(revstr0);
    enc.encodeOctetString(revstr1);
    enc.encodeOctetString(revstr2);
    enc.encodeOctetString(revstr3);
    enc.encodeOctetString(revstr4);
    enc.encodeOctetString(revstr5);
    enc.encodeOctetString(revstr6);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    id = dec.decodeInteger();
    globalawardid = dec.decodeInteger();
    onlineawardid = dec.decodeInteger();
    finishawardid = dec.decodeInteger();
    selfpublictionawardid = dec.decodeInteger();
    selfparticipateawardid = dec.decodeInteger();
    selfwinawardid = dec.decodeInteger();
    uid = dec.decodeInteger();
    nick = dec.decodeOctetString();
    sex = dec.decodeInteger();
    headpickey = dec.decodeOctetString();
    winuid = dec.decodeInteger();
    winnick = dec.decodeOctetString();
    winsex = dec.decodeInteger();
    winheadpickey = dec.decodeOctetString();
    createtime = dec.decodeInteger();
    endtime = dec.decodeInteger();
    leftime = dec.decodeInteger();
    isanonymous = dec.decodeInteger();
    awardstatus = dec.decodeInteger();
    awardtype = dec.decodeInteger();
    awardTextInfo.decode(dec);
    awardGiftInfo.decode(dec);
    participateInfoList.decode(dec);
    maxparticipatenum = dec.decodeInteger();
    issndaward = dec.decodeInteger();
    revint0 = dec.decodeInteger();
    revint1 = dec.decodeInteger();
    revint2 = dec.decodeInteger();
    revint3 = dec.decodeInteger();
    revint4 = dec.decodeInteger();
    revint5 = dec.decodeInteger();
    revint6 = dec.decodeInteger();
    revstr0 = dec.decodeOctetString();
    revstr1 = dec.decodeOctetString();
    revstr2 = dec.decodeOctetString();
    revstr3 = dec.decodeOctetString();
    revstr4 = dec.decodeOctetString();
    revstr5 = dec.decodeOctetString();
    revstr6 = dec.decodeOctetString();
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("id = ");
    os.print(id.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("globalawardid = ");
    os.print(globalawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("onlineawardid = ");
    os.print(onlineawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("finishawardid = ");
    os.print(finishawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("selfpublictionawardid = ");
    os.print(selfpublictionawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("selfparticipateawardid = ");
    os.print(selfparticipateawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("selfwinawardid = ");
    os.print(selfwinawardid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("uid = ");
    os.print(uid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("nick = ");
    os.print(Hex.toString(nick));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("sex = ");
    os.print(sex.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("headpickey = ");
    os.print(Hex.toString(headpickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("winuid = ");
    os.print(winuid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("winnick = ");
    os.print(Hex.toString(winnick));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("winsex = ");
    os.print(winsex.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("winheadpickey = ");
    os.print(Hex.toString(winheadpickey));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("createtime = ");
    os.print(createtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("endtime = ");
    os.print(endtime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("leftime = ");
    os.print(leftime.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("isanonymous = ");
    os.print(isanonymous.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("awardstatus = ");
    os.print(awardstatus.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("awardtype = ");
    os.print(awardtype.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("awardTextInfo = ");
    awardTextInfo.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("awardGiftInfo = ");
    awardGiftInfo.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("participateInfoList = ");
    participateInfoList.print(os, indent+2);
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("maxparticipatenum = ");
    os.print(maxparticipatenum.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("issndaward = ");
    os.print(issndaward.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint0 = ");
    os.print(revint0.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint1 = ");
    os.print(revint1.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint2 = ");
    os.print(revint2.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint3 = ");
    os.print(revint3.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint4 = ");
    os.print(revint4.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint5 = ");
    os.print(revint5.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revint6 = ");
    os.print(revint6.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr0 = ");
    os.print(Hex.toString(revstr0));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr1 = ");
    os.print(Hex.toString(revstr1));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr2 = ");
    os.print(Hex.toString(revstr2));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr3 = ");
    os.print(Hex.toString(revstr3));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr4 = ");
    os.print(Hex.toString(revstr4));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr5 = ");
    os.print(Hex.toString(revstr5));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("revstr6 = ");
    os.print(Hex.toString(revstr6));
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
