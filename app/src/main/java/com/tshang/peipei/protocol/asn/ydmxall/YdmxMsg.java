//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/com/ydmx/peipei/ASN/ydmxall/YdmxMsg.java
//
//   Java class for ASN.1 definition YdmxMsg as defined in
//   module YDMXALL.
//   This file was generated by Snacc for Java at Fri Mar 21 13:57:43 2014
//-----------------------------------------------------------------------------

package com.tshang.peipei.protocol.asn.ydmxall;

// Import PrintStream class for print methods
import java.io.PrintStream;

import com.ibm.asn1.ASN1Decoder;
import com.ibm.asn1.ASN1Encoder;
import com.ibm.asn1.ASN1Exception;
// Import ASN.1 decoding/encoding classes
import com.ibm.asn1.ASN1Type;
// Import ASN.1 basic type representations
import com.ibm.util.Hex;
// Imported ASN.1 types from package com.tshang.peipei.protocol.asn.gogirl

/** This class represents the ASN.1 SEQUENCE type <tt>YdmxMsg</tt>.
  * For each sequence member, sequence classes contain a
  * public member variable of the corresponding Java type.
  * @author Snacc for Java
  * @version Fri Mar 21 13:57:43 2014

  */

public class YdmxMsg implements ASN1Type {

  /** member variable representing the sequence member destid of type java.math.BigInteger */
  public java.math.BigInteger destid;
  /** member variable representing the sequence member srcid of type java.math.BigInteger */
  public java.math.BigInteger srcid;
  /** member variable representing the sequence member ver of type java.math.BigInteger */
  public java.math.BigInteger ver;
  /** member variable representing the sequence member seq of type java.math.BigInteger */
  public java.math.BigInteger seq;
  /** member variable representing the sequence member auth of type byte[] */
  public byte[] auth;
  /** member variable representing the sequence member body of type PKTS */
  public PKTS body = new PKTS();

  /** default constructor */
  public YdmxMsg() {}

  /** copy constructor */
  public YdmxMsg (YdmxMsg arg) {
    destid = arg.destid;
    srcid = arg.srcid;
    ver = arg.ver;
    seq = arg.seq;
    auth = new byte[arg.auth.length];
    System.arraycopy(arg.auth,0,auth,0,arg.auth.length);
    body = new PKTS(arg.body);
  }

  /** encoding method.
    * @param enc
    *        encoder object derived from com.ibm.asn1.ASN1Encoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            encoding error
    */
  public void encode (ASN1Encoder enc) throws ASN1Exception {
    int seq_nr = enc.encodeSequence();
    enc.encodeInteger(destid);
    enc.encodeInteger(srcid);
    enc.encodeInteger(ver);
    enc.encodeInteger(seq);
    enc.encodeOctetString(auth);
    body.encode(enc);
    enc.endOf(seq_nr);
  }

  /** decoding method.
    * @param dec
    *        decoder object derived from com.ibm.asn1.ASN1Decoder
    * @exception com.ibm.asn1.ASN1Exception 
    *            decoding error
    */
  public void decode (ASN1Decoder dec) throws ASN1Exception {
    int seq_nr = dec.decodeSequence();
    destid = dec.decodeInteger();
    srcid = dec.decodeInteger();
    ver = dec.decodeInteger();
    seq = dec.decodeInteger();
    auth = dec.decodeOctetString();
    body.decode(dec);
    dec.endOf(seq_nr);
  }

  /** print method (variable indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    * @param indent
    *        number of blanks that preceed each output line.
    */
  public void print (PrintStream os, int indent) {
    os.println("{ -- SEQUENCE --");
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("destid = ");
    os.print(destid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("srcid = ");
    os.print(srcid.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("ver = ");
    os.print(ver.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("seq = ");
    os.print(seq.toString());
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("auth = ");
    os.print(Hex.toString(auth));
    os.println(',');
    for(int ii = 0; ii < indent+2; ii++) os.print(' ');
    os.print("body = ");
    body.print(os, indent+2);
    os.println();
    for(int ii = 0; ii < indent; ii++) os.print(' ');
    os.print('}');
  }

  /** default print method (fixed indentation)
    * @param os
    *        PrintStream representing the print destination (file, etc)
    */
  public void print (PrintStream os) {
    print(os,0);
  }

  /** toString method
    * @return the output of {@link #print(PrintStream) print} method (fixed indentation) as a string
    */
  public String toString () {
    java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    print(ps);
    ps.close();
    return baos.toString();
  }

}
